AWSTemplateFormatVersion: '2010-09-01'
Description: 'Setup for IAM S3 console visibility exercise'

Resources:
  ProjectAssetsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: project-assets-2024
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  TestUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: project-user
      Path: "/"

  UserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref TestUser

  RestrictedUserPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: S3RestrictedAccess
      Users: 
        - !Ref TestUser
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:PutObjectAcl
              - s3:GetObjectAcl
              - s3:ListBucket
            Resource:
              - !Sub 'arn:aws:s3:::${ProjectAssetsBucket}'
              - !Sub 'arn:aws:s3:::${ProjectAssetsBucket}/*'

  TestFile:
    Type: Custom::S3File
    Properties:
      ServiceToken: !GetAtt CreateTestFileLambda.Arn
      BucketName: !Ref ProjectAssetsBucket
      
  CreateTestFileLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def handler(event, context):
              if event['RequestType'] in ['Create', 'Update']:
                  s3 = boto3.client('s3')
                  try:
                      s3.put_object(
                          Bucket=event['ResourceProperties']['BucketName'],
                          Key='test.txt',
                          Body='This is a test file'
                      )
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  except Exception as e:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {})
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.8

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub '${ProjectAssetsBucket.Arn}/*'

Outputs:
  BucketName:
    Description: Name of the project assets bucket
    Value: !Ref ProjectAssetsBucket

  UserName:
    Description: Name of the test user
    Value: !Ref TestUser

  AccessKeyId:
    Description: Access Key ID for the test user
    Value: !Ref UserAccessKey

  SecretAccessKey:
    Description: Secret Access Key for the test user
    Value: !GetAtt UserAccessKey.SecretAccessKey